{"version":3,"sources":["InfoBox.js","LineGraph.js","LineGraphC.js","Table.js","TableS.js","util.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","console","log","timeline","LineGraphC","countries","url","catch","error","Table","map","country","TableS","states","state","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","attribution","App","setInputCountry","setCountryInfo","setCountries","setStates","NameLine","setNameLine","mapCountries","setMapCountries","LineCountries","setLineCountries","tableData","setTableData","tableDataS","setTableDataS","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","getStatesData","i","arrayname","dataS","onCountryChange","e","countryCode","target","countryName","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9eb0be2f.chunk.js","sourcesContent":["import React from 'react'\nimport './InfoBox.css'\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\nfunction InfoBox({title,cases,total,active, isRed, ...props}) {\n    return (\n        <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType='cases' }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          \n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n        {/* data and data.length>0 */}\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data,casesType) => {\n  let chartData = [];\n  let timeline=\"timeline\"\n//   let casesType='cases'\n  let lastDataPoint;\n  console.log(\"hi\",data.timeline.cases)\n  for (let date in data.timeline.cases) {\n    console.log(\"inside loop\",date)\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[timeline][casesType][date]-lastDataPoint ,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[timeline][casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraphC({ countries, casesType='cases' }) {\n  const [data, setData] = useState({});\n  console.log(\"abc\",countries);\n  useEffect(() => {\n    // console.log(\"abc\",countries);\n    if (countries !== \"worldwide\"){\n        const url =`https://disease.sh/v3/covid-19/historical/${countries}?lastdays=200`;\n    const fetchData = async () => {\n    //   await fetch(\"https://disease.sh/v3/covid-19/historical/India?lastdays=365\")\n      await fetch(url)\n        .then((response) => {\n                return  response.json();\n        })\n        .then((data) => {\n            console.log(\"ok\",data)\n\n          let chartData = buildChartData(data,casesType);\n          console.log(\"vvv\",chartData)\n          setData(chartData);\n          \n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n    };\n\n    fetchData();}\n  },[countries,casesType]);\n\n  return (\n    <div>\n        {console.log(\"yay\",data)}\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraphC;","import React from 'react'\nimport \"./Table.css\"\nfunction Table({countries}) {\n    return(\n        <div className=\"table\">\n            {countries.map(({country, cases})=>(\n                <tr>\n                    <td>{country}\n                    </td>\n                    <td><strong>{cases}</strong>\n                    </td>\n                 </tr>\n\n            ))}\n        </div>\n    );\n}\n\nexport default Table\n","import React from 'react'\nimport \"./Table.css\"\nfunction TableS({states}) {\n    return(\n        <div className=\"table\">\n            {states.map(({state, cases})=>(\n                <tr>\n                    <td>{state}\n                    </td>\n                    <td><strong>{cases}</strong>\n                    </td>\n                 </tr>\n\n            ))}\n        </div>\n    );\n}\n\nexport default TableS\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport Leaflet from 'leaflet';\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\nimport 'leaflet/dist/leaflet.css';\n\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport dataS from \"./data.json\"; \nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport LineGraphC from \"./LineGraphC\";\nimport Table from \"./Table\";\nimport TableS from \"./TableS\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [NameLine, setNameLine] = useState([]);\n  \n  const [mapCountries, setMapCountries] = useState([]);\n  const [LineCountries, setLineCountries] = useState(\"worldwide\");\n  const [tableData, setTableData] = useState([]);\n  const [tableDataS, setTableDataS] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          console.log(\"frst\", countries);\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          \n          setTableData(sortedData);\n        })\n    };\n\n    getCountriesData();\n  }, []);\n\n  useEffect(() => {\n    const getStatesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/states\")\n        .then((response) => response.json())\n        .then((data) => {\n          const states = data.map((state) => ({\n            name: state.state\n            \n          }));\n          let sortedData = sortData(data);\n          setStates(states);\n          //setMapCountries(data);\n          setTableDataS(sortedData);\n        });\n    };\n\n    getStatesData();\n  }, []);\n\n  var i = 0;\n  var arrayname=[]\n  for(i=0;i<dataS.length;i++) {\n    var countryS=\"country\"\n  \n  arrayname.push(dataS[i][countryS]);\n  }\n  //console.log(\"yolo\",arrayname);\n  \n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const countryName=e.target.name;\n    console.log(countryName + \" hghgh\");\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setLineCountries(countryCode);\n        setNameLine(countryName);\n        //console.log(\"lc\",countryCode);\n        if(countryCode===\"worldwide\"){\n          setMapCenter([34.80746,  -40.4796]);\n        }\n        else{\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              //name = {country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.name}>{country.name}</MenuItem>\n                \n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        \n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            {\n            LineCountries===\"USA\"? <><h3>Live Cases by US States</h3> <TableS states={tableDataS} /></>: \"\" \n            }\n            \n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n            {console.log(NameLine + \" nameLine\")}\n            {\n            LineCountries!==\"worldwide\" && arrayname.includes(LineCountries)?<><h3>Countrywise new {casesType}</h3>\n            <LineGraphC countries={LineCountries} casesType={casesType} /></>: \"\" \n            }\n            \n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}